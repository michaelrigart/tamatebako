#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'tamatebako_version'

require 'cryptography/base64'
require 'cryptography/digest'
require 'cryptography/password'
require 'cryptography/cracker'

require 'network/port_scanner'

include GLI

program_desc 'Tamatebako is a small cli based toolbox that might keep you safe.'

version Tamatebako::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'Base64 encoder/decoder'
arg_name 'string'
command :base64 do |c|
  c.desc 'Base64 encode argmuent'
  c.switch [:e, :encode]

  c.desc 'Decode Base64 argument'
  c.switch [:d, :decode]

  c.action do |global_options,options,args|
    STDOUT << Tamatebako::Cryptography::Base64.encode(args.first) if options[:encode]
    STDOUT << Tamatebako::Cryptography::Base64.decode(args.first) if options[:decode]
    STDOUT << "\n"
  end
end

desc 'Multi-Digest (MD5, SHA1, SHA256, SHA384, SHA512, RIPEMD-160)'
arg_name 'Describe arguments to digest here'
command :digest do |c|
  c.desc 'Digest hash type'
  c.default_value 'md5'
  c.flag [:t, :type]

  c.action do |global_options,options,args|
    STDOUT << Tamatebako::Cryptography::Digest.hex(options[:t], args.first)
    STDOUT << "\n"
  end
end

desc 'Secure password generator'
arg_name 'Describe arguments to generator here'
command :password do |c|
  c.desc 'Allow capital letters'
  c.switch [:c, :capitals]

  c.desc 'Allow numbers'
  c.switch [:n, :numbers]

  c.desc 'Allow special characters'
  c.switch [:s, :specials]

  c.desc 'Password length'
  c.default_value 8
  c.flag [:l, :length]

  c.desc 'Unique characters only'
  c.switch [:u, :unique]


  c.action do |global_options,options,args|
    generator = Tamatebako::Cryptography::Password.new(options)
    STDOUT << "#{generator.generate}\n"
  end
end

desc 'Hash Password Cracker (MD5, SHA1, SHA256, SHA384, SHA512, RIPEMD-160)'
arg_name 'Describe arguments to cracker here'
command :cracker do |c|
  c.desc 'Digest hash type'
  c.default_value 'md5'
  c.flag [:t, :type]

  c.desc "Numbers bruteforce"
  c.switch [:n, :numbers]

  c.desc "Dictionary attack"
  c.switch [:d, :dictionary]

  c.desc 'Dictionary file'
  c.default_value "#{File.dirname(File.realpath(__FILE__))}/../assets/wlist.txt"
  c.flag [:f, :file]

  c.desc 'Decrypt online (only MD5, SHA1, SHA256, RIPEMD-160'
  c.switch [:o, :online]


  c.action do |global_options,options,args|
    STDOUT << "#{Tamatebako::Cryptography::Cracker.numbers(options[:t], args.first)}\n" if options[:n]
    STDOUT << "#{Tamatebako::Cryptography::Cracker.dictionary(options[:t], options[:f], args.first)}\n" if options[:d]
    STDOUT << "#{Tamatebako::Cryptography::Cracker.online(options[:t], args.first)}\n" if options[:o]
  end
end

desc 'Simple port scanner'
arg_name 'Describe arguments to generator here'
command :portscan do |c|
  c.desc "Host address"
  c.default_value "127.0.0.1"
  c.flag [:h, :host]

  c.desc "Port range"
  c.default_value "0-65535"
  c.flag [:p, :port]

  c.action do |global_options,options,args|
    STDOUT << "PORT\t\tSERVICE\n"
    start_time = Time.now

    Tamatebako::Network::PortScanner.tcp_scan(options[:h], options[:p])

    STDOUT << "\n#{options[:h]} scanned in #{Time.now - start_time} seconds\n"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)